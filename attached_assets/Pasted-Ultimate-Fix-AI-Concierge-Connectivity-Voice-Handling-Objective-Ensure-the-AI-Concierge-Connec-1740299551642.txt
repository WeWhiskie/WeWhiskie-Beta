Ultimate Fix: AI Concierge Connectivity & Voice Handling
Objective
Ensure the AI Concierge: ‚úÖ Connects successfully via WebSocket (no 401 errors or disconnections).
‚úÖ Displays an avatar and responds to messages.
‚úÖ Processes voice input with clear UI feedback.
‚úÖ Replies with voice output and stable audio.

1Ô∏è‚É£ Fix WebSocket & Authentication Stability
Problem
Persistent WebSocket disconnections and authentication (401) failures.
AI Concierge fails to maintain a session.
Solution
Force WebSocket to Reconnect Automatically

Implement an exponential backoff retry strategy (retry after 1s, 2s, 4s, 8s... up to 30s).
Add a heartbeat ping every 10 seconds to keep the connection alive.
Enhance Authentication Handling

Ensure that authentication tokens are refreshed before expiry.
Validate that token-based auth is applied to WebSocket requests.
Implement WebSocket Debugging Logs

Add logs to show connection status updates in real-time:
Connected ‚úÖ
Reconnecting... üîÑ
Authentication Error ‚ùå (Token Expired)
Use console.log() in the browser & backend to detect where it fails.
Replit Instructions
javascript
Copy
Edit
const wsReconnect = () => {
    let reconnectDelay = 1000; // Start at 1s
    const maxDelay = 30000; // Max 30s

    function connectWebSocket() {
        const ws = new WebSocket('wss://your-websocket-endpoint');

        ws.onopen = () => {
            console.log('‚úÖ WebSocket Connected');
            reconnectDelay = 1000; // Reset delay on success
        };

        ws.onmessage = (message) => {
            console.log('üì© Message from server:', message.data);
        };

        ws.onerror = (error) => {
            console.error('‚ö†Ô∏è WebSocket Error:', error);
            ws.close();
        };

        ws.onclose = (event) => {
            console.warn('üîå WebSocket Disconnected', event.reason);
            setTimeout(connectWebSocket, reconnectDelay);
            reconnectDelay = Math.min(reconnectDelay * 2, maxDelay);
        };
    }

    connectWebSocket();
};
wsReconnect();
‚úÖ Guarantees Auto-Reconnect & Stable WebSocket Handling

2Ô∏è‚É£ Ensure Speech Recognition & Avatar UI Work
Problem
Microphone icon does not change during voice input.
No clear indication of active listening.
Avatar does not animate during speech.
Solution
Change Mic Icon When Listening

Show a "talking head" icon instead of a static microphone.
Use a waveform animation to visually indicate recognition.
Ensure Transcription Displays Live

Show live speech-to-text captions while speaking.
Fix Avatar Animation on Response

Avatar should move lips/sync with speech output.
If WebRTC is enabled, ensure AI voice replies with correct timing.
Replit Instructions
javascript
Copy
Edit
const startVoiceRecognition = () => {
    const micButton = document.getElementById('mic');
    const avatar = document.getElementById('avatar');
    
    micButton.innerHTML = 'üé§ Listening...'; // Update UI
    micButton.classList.add('active'); // Add active animation

    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'en-US';
    recognition.interimResults = true;

    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        console.log('üéôÔ∏è Recognized:', transcript);
        document.getElementById('liveText').innerText = transcript;
    };

    recognition.onend = () => {
        micButton.innerHTML = 'üé§ Tap to Speak';
        micButton.classList.remove('active');
    };

    recognition.start();
};

document.getElementById('mic').addEventListener('click', startVoiceRecognition);
‚úÖ Guarantees Live Speech Recognition & UI Feedback

3Ô∏è‚É£ Enable AI Voice Responses with Animated Avatar
Problem
No voice output from AI when responding.
Avatar is static during speech.
Solution
Ensure AI Generates Speech Response

Use Web Speech API to make AI talk back.
Synchronize text-to-speech (TTS) with avatar animation.
Animate Avatar During Speech

While AI speaks, move avatar lips.
Sync movement with TTS duration.
Replit Instructions
javascript
Copy
Edit
const speakText = (text) => {
    const avatar = document.getElementById('avatar');
    
    if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'en-US';
        
        utterance.onstart = () => {
            avatar.classList.add('talking'); // Add animation
        };

        utterance.onend = () => {
            avatar.classList.remove('talking'); // Remove animation
        };

        window.speechSynthesis.speak(utterance);
    } else {
        console.warn('Speech synthesis not supported.');
    }
};
‚úÖ Guarantees AI Talks & Avatar Moves During Speech

4Ô∏è‚É£ Debug WebRTC & Fix Connection Drops
Problem
WebRTC audio playback cuts off.
Voice messages stop mid-sentence.
Solution
Ensure WebRTC Sessions Remain Open

Extend WebRTC session timeout beyond 60 seconds.
Keep a persistent audio channel.
Ensure AI Voice Is Consistent

If voice cuts off, retry speech playback.
Replit Instructions
javascript
Copy
Edit
const keepAlive = () => {
    setInterval(() => {
        if (peerConnection && peerConnection.iceConnectionState === 'disconnected') {
            console.warn('üîÑ Reconnecting WebRTC...');
            peerConnection.restartIce();
        }
    }, 5000); // Check every 5 seconds
};

keepAlive();
‚úÖ Guarantees WebRTC Stability & No Connection Drops

5Ô∏è‚É£ Final Debugging Steps
Replit Debug Checklist
‚úÖ Check Console Logs

If WebSocket fails, look for 401 error or connection lost.
If voice doesn‚Äôt work, check SpeechRecognition & SpeechSynthesis logs.
‚úÖ Check Permissions

Ensure microphone & speaker access is allowed.
‚úÖ Test Speech & WebSocket Separately

Open console and manually call:
javascript
Copy
Edit
startVoiceRecognition();
speakText("Hello, can you hear me?");
‚úÖ Verify WebRTC Audio Streams

Open console, type:
javascript
Copy
Edit
console.log(peerConnection.getReceivers());
‚úÖ Test AI Replies Without UI

Send a test message from console:
javascript
Copy
Edit
ws.send(JSON.stringify({ message: "Hello AI!" }));
Final Instructions for Replit
Implement Auto-Reconnect WebSocket Handling (wsReconnect();)
Fix Speech Recognition & Avatar Animation (startVoiceRecognition();)
Ensure AI Speaks Back With Animation (speakText("Testing AI speech");)
Keep WebRTC Audio Open & Restart ICE on Disconnect (keepAlive();)
Debug Logs in Console for Speech & Connection Status
üöÄ Result:
‚úÖ Stable WebSocket
‚úÖ Speech Recognition Works
‚úÖ AI Talks with Lip Sync
‚úÖ No Connection Drops
‚úÖ Ultimate Indestructible AI Concierge!

