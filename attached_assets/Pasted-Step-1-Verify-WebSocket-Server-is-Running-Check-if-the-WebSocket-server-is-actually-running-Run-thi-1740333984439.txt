Step 1: Verify WebSocket Server is Running
Check if the WebSocket server is actually running
Run this command in Replit's shell:

sh
Copy
Edit
lsof -i :YOUR_WEBSOCKET_PORT
Replace YOUR_WEBSOCKET_PORT with the actual port (e.g., 3001).
If no output appears, the WebSocket server might not be starting correctly.
Fix if not running:

Ensure your WebSocket server is running inside server/routes.ts (or equivalent backend file).
Step 2: Confirm WebSocket URL in the Frontend
Ensure the Frontend is Using the Correct URL
Check how your frontend is connecting to WebSockets.

In your React (or vanilla JS) frontend, look for WebSocket initialization:

javascript
Copy
Edit
const socket = new WebSocket("ws://localhost:YOUR_WEBSOCKET_PORT");  // Dev mode
// OR
const socket = new WebSocket("wss://your-production-url");  // Production mode
✅ Make sure the URL matches where your WebSocket server is running!

If using Replit:

Replit uses an assigned domain for the server (https://your-replit-project.replit.dev).
WebSockets need to use wss://your-replit-project.replit.dev instead of ws://localhost.
Fix if needed:

Update the frontend to use the correct WebSocket address.
Step 3: Debug WebSocket Connection in Browser
Use Developer Tools to Check Connection
Open Developer Console
Chrome: F12 → Console & Network tab
Look for WebSocket errors in Console.
Check the Network Tab
Open Network → WS (WebSockets)
Click on the WebSocket connection, and check the messages.
Possible Errors & Fixes:

Error	Fix
Connection Refused	Check that the server is running (Step 1)
CORS error	Enable CORS in server/routes.ts (Step 4)
Handshake failed	Ensure using wss:// in production
Step 4: Ensure WebSocket Server is Handling Connections
Add Debugging Logs to Your WebSocket Server
Open your server/routes.ts and add logs to verify connections:

typescript
Copy
Edit
import { Server } from "socket.io";

const io = new Server(3001, {
    cors: {
        origin: "*",  // Allow frontend to connect
        methods: ["GET", "POST"]
    }
});

io.on("connection", (socket) => {
    console.log(`🔗 Client Connected: ${socket.id}`);

    socket.on("disconnect", () => {
        console.log(`❌ Client Disconnected: ${socket.id}`);
    });

    socket.on("message", (data) => {
        console.log(`📩 Message received: ${data}`);
        socket.send("Message received!");
    });
});
✅ Run the backend and check if connections are logged in the console.

Step 5: Test WebSocket Connection Manually
Use wscat (WebSocket CLI tool) to connect to the server.

1️⃣ Install wscat in the Replit Shell
sh
Copy
Edit
npm install -g wscat
2️⃣ Manually Connect to the WebSocket
sh
Copy
Edit
wscat -c ws://localhost:3001
If connected successfully, type a message and see if the server responds.
If it doesn’t connect:

Check if Replit is blocking the WebSocket port.
Ensure the WebSocket server is running (Step 1).
Step 6: Implement a Reconnection Strategy in the Frontend
If WebSockets disconnect after some time, add automatic reconnection logic:

javascript
Copy
Edit
let socket = new WebSocket("wss://your-replit-project.replit.dev");

socket.onopen = () => {
    console.log("✅ Connected to WebSocket server.");
};

socket.onclose = () => {
    console.log("⚠️ Connection closed. Attempting reconnect in 5 seconds...");
    setTimeout(() => {
        socket = new WebSocket("wss://your-replit-project.replit.dev");
    }, 5000);
};
✅ This ensures the AI Concierge attempts to reconnect after a dropped connection.

Step 7: Fix Heartbeat Mechanism
If the connection keeps timing out, implement a heartbeat ping in server/routes.ts:

typescript
Copy
Edit
setInterval(() => {
    io.sockets.sockets.forEach((socket) => {
        console.log("🔄 Sending heartbeat");
        socket.send(JSON.stringify({ type: "heartbeat" }));
    });
}, 30000);  // Every 30 seconds
✅ This prevents the WebSocket from closing due to inactivity.

Final Debugging Checklist
🔲 WebSocket server is running (lsof -i :YOUR_PORT confirms this).
🔲 Frontend is using the correct WebSocket URL (wss://your-replit-project.replit.dev).
🔲 Developer Console shows an active WebSocket connection in the Network tab.
🔲 Server logs show clients connecting and disconnecting.
🔲 Manual WebSocket test with wscat is successful.
🔲 Reconnection strategy is in place to handle dropped connections.
🔲 Heartbeat mechanism is working to prevent timeouts.

Next Steps
✅ Try each step one at a time in Replit.
✅ Keep checking the logs for error messages.
✅ Once you identify the issue, update the WebSocket code accordingly.